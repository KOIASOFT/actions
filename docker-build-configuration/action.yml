name: 'Docker build configuration'
description: 'Prepare Docker build configuration for a specified app'
inputs:
  app:
    description: 'Excludes the following apps from the output (in comma-separated list format)'
    required: true
  config_file_path:
    description: 'The path to the configuration file.'
    required: true
    default: '.infrastructure/config.yaml'
  debug:
    description: 'Prints debug trace'
    required: true
    default: "false"
outputs:
  docker_registry:
    description: "The Docker registry for the specified app."
    value: ${{ steps.process.outputs.docker_registry }}
  docker_repository:
    description: "The Docker repository for the specified app."
    value: ${{ steps.process.outputs.docker_repository }}
  docker_repository_location_only:
    description: "The Docker repository location only(omits registry part) for the specified app."
    value: ${{ steps.process.outputs.docker_repository_location_only }}
  docker_image_tag:
    description: "The Docker image name for the current Git changeset."
    value: ${{ steps.process.outputs.image_tag }}
  app_folder:
    description: "The folder of the specified app."
    value: ${{ steps.process.outputs.folder }}
runs:
  using: "composite"
  steps:
    - name: Read list of available apps
      id: process
      shell: bash
      env:
        CONFIG_PATH: ${{ inputs.config_file_path }}
        APP: ${{ inputs.app }}
        DEBUG: ${{ inputs.debug }}
      run: |
        set -e
        
        if [ "$DEBUG" == "true" ]; then
          set -x
          pwd
          find
        fi
        
        test -n "$APP"         || { echo "Variable 'app' missing"; exit 1; }
        test -n "$CONFIG_PATH" || { echo "Variable 'config_path' missing"; exit 2; }
        test -n "$DEBUG"       || { echo "Variable 'debug' missing"; exit 3; }
        test -f "$CONFIG_PATH" || { echo "Config '$CONFIG_PATH' file not found"; exit 4; }
        
        alias yq='docker run --rm -v $PWD:/workdir mikefarah/yq'
      
        repository_query=".apps.${APP}.docker_repository"
        folder_query=".apps.${APP}.folder"
        
        image_tag=$(git rev-parse --short HEAD)
        docker_registry=$(yq e '.apps.common.docker_registry' $CONFIG_PATH)
        docker_repository_location_only=$(yq e "$repository_query" $CONFIG_PATH)
        docker_repository="$docker_registry/$docker_repository_location_only"
        docker_image="$docker_repository:$image_tag"
        folder=$(yq e "$folder_query" $CONFIG_PATH)
        
        echo "::set-output name=docker_registry::$docker_registry"
        echo "::set-output name=docker_repository::$docker_repository"
        echo "::set-output name=docker_repository_location_only::$docker_repository_location_only"
        echo "::set-output name=docker_image::$docker_image"
        echo "::set-output name=image_tag::$image_tag"
        echo "::set-output name=folder::$folder"
